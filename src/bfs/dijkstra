Template of dijkstra:
public int shortestDistance(int[][] maze, int[] start, int[] destination) {
        int[][] dis// record distance to start at each point and fill with Max value
        dis[start[0]][start[1]] = 0;
        dijsktra(maze, dis, start);
        int res = dis[destination[0]][destination[1]];// find destination in distance array
        return
    }

    private void dijsktra(int[][] maze, int[][] dis, int[] start) {
        PriorityQueue<int[]> pq //like the greedy, [x, y, distance to the start point], the distance to the start point is increasing
        pq.offer(new int[]{start[0], start[1], 0}); // add start to the pq
        while (!pq.isEmpty()) {
            int[] cur = pq.poll();  // poll out the first in queue
            for (int i = 0; i < 4; i++) {
                int x = cur[0]; // move x y
                int y = cur[1];
                while (x >= 0 && y >= 0 && x < row && y < col && maze[x][y] != 1) {
                    x += dx[i];
                    y += dy[i];
                    count++;
                }
                // if new distance is smaller, then put into the pq and update the distance
                if (count + dis[cur[0]][cur[1]] < dis[x][y]) {
                    dis[x][y] = count + dis[cur[0]][cur[1]];
                    pq.offer(new int[]{x, y, dis[x][y]});
                }
            }
        }
    }